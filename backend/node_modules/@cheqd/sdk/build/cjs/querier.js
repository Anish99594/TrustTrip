"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheqdQuerier = void 0;
const stargate_cjs_1 = require("@cosmjs/stargate-cjs");
const tendermint_rpc_cjs_1 = require("@cosmjs/tendermint-rpc-cjs");
class CheqdQuerier extends stargate_cjs_1.QueryClient {
    constructor(tmClient) {
        super(tmClient);
    }
    static async getConsensusParameters(url) {
        // connect to comet rpc
        const cometClient = await tendermint_rpc_cjs_1.Tendermint37Client.connect(url);
        // get block results
        const result = await cometClient.blockResults();
        // disconnect comet client
        cometClient.disconnect();
        // return consensus parameters
        return result.consensusUpdates;
    }
    static async connect(url) {
        const tmClient = await tendermint_rpc_cjs_1.Tendermint37Client.connect(url);
        return new CheqdQuerier(tmClient);
    }
    static async fromClient(client) {
        return new CheqdQuerier(client);
    }
    static async connectWithExtension(url, extension) {
        const tmClient = await tendermint_rpc_cjs_1.Tendermint37Client.connect(url);
        return CheqdQuerier.withExtensions(tmClient, extension);
    }
    static async connectWithExtensions(url, ...extensions) {
        if (extensions.length === 1) {
            return CheqdQuerier.connectWithExtension(url, extensions[0]);
        }
        const tmClient = await tendermint_rpc_cjs_1.Tendermint37Client.connect(url);
        const tupleLike = extensions;
        return CheqdQuerier.withExtensions(tmClient, ...tupleLike);
    }
}
exports.CheqdQuerier = CheqdQuerier;
//# sourceMappingURL=querier.js.map