import { GeneratedType } from '@cosmjs/proto-signing-cjs';
import { CheqdSigningStargateClient } from '../signer';
import { IModuleMethodMap, QueryExtensionSetup } from '../types';
import { CheqdQuerier } from '../querier';
export declare abstract class AbstractCheqdSDKModule {
    _signer: CheqdSigningStargateClient;
    methods: IModuleMethodMap;
    querier: CheqdQuerier;
    readonly _protectedMethods: string[];
    static readonly registryTypes: Iterable<[string, GeneratedType]>;
    static readonly querierExtensionSetup: QueryExtensionSetup<any>;
    constructor(signer: CheqdSigningStargateClient, querier: CheqdQuerier);
    abstract getRegistryTypes(): Iterable<[string, GeneratedType]>;
}
export type MinimalImportableCheqdSDKModule<T extends AbstractCheqdSDKModule> = Omit<T, '_signer' | '_protectedMethods' | 'registryTypes' | 'querierExtensionSetup' | 'getRegistryTypes' | 'getQuerierExtensionSetup'>;
export declare function instantiateCheqdSDKModule<T extends new (...args: any[]) => T>(module: T, ...args: ConstructorParameters<T>): T;
export declare function instantiateCheqdSDKModuleRegistryTypes(module: any): Iterable<[string, GeneratedType]>;
export declare function instantiateCheqdSDKModuleQuerierExtensionSetup(module: any): QueryExtensionSetup<any>;
export declare function applyMixins(derivedCtor: any, constructors: any[]): IModuleMethodMap;
//# sourceMappingURL=_.d.ts.map