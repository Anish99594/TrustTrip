import { IKeyPair, IKeyValuePair, ISignInputs, VerificationMethods, TMethodSpecificId, MethodSpecificIdAlgo, TVerificationKey, TVerificationKeyPrefix, CheqdNetwork, IVerificationKeys, VerificationMethod, DIDDocument, SpecValidationResult } from './types.js';
import { KeyPair } from '@stablelib/ed25519';
import { DirectSecp256k1HdWallet, DirectSecp256k1Wallet } from '@cosmjs/proto-signing';
import { EnglishMnemonic as _ } from '@cosmjs/crypto';
import { MsgCreateResourcePayload } from '@cheqd/ts-proto/cheqd/resource/v2/index.js';
import { Coin } from 'cosmjs-types/cosmos/base/v1beta1/coin';
import { BackoffOptions } from 'exponential-backoff';
export type TImportableEd25519Key = {
    publicKeyHex: string;
    privateKeyHex: string;
    kid: string;
    type: 'Ed25519';
};
export declare const TImportableEd25519Key: {
    isValid(key: any): key is TImportableEd25519Key;
};
export declare function isEqualKeyValuePair(kv1: IKeyValuePair[], kv2: IKeyValuePair[]): boolean;
export declare class EnglishMnemonic extends _ {
    static readonly _mnemonicMatcher: RegExp;
}
export declare function createSignInputsFromImportableEd25519Key(key: TImportableEd25519Key, verificationMethod: VerificationMethod[]): ISignInputs;
export declare function createKeyPairRaw(seed?: string): KeyPair;
export declare function createKeyPairBase64(seed?: string): IKeyPair;
export declare function createKeyPairHex(seed?: string): IKeyPair;
export declare function createVerificationKeys(publicKey: string, algo: MethodSpecificIdAlgo, keyFragment: TVerificationKey<TVerificationKeyPrefix, number>, network?: CheqdNetwork, methodSpecificId?: TMethodSpecificId, didUrl?: string): IVerificationKeys;
export declare function createDidVerificationMethod(verificationMethodTypes: VerificationMethods[], verificationKeys: IVerificationKeys[]): VerificationMethod[];
export declare function createDidPayload(verificationMethods: VerificationMethod[], verificationKeys: IVerificationKeys[], controller?: string[]): DIDDocument;
export declare function validateSpecCompliantPayload(didDocument: DIDDocument): SpecValidationResult;
export declare function createCosmosPayerWallet(cosmosPayerSeed: string): Promise<DirectSecp256k1HdWallet | DirectSecp256k1Wallet>;
export declare function toMultibaseRaw(key: Uint8Array): string;
export declare function createMsgCreateDidDocPayloadToSign(didPayload: DIDDocument, versionId: string): Promise<Uint8Array<ArrayBufferLike>>;
export declare const createMsgUpdateDidDocPayloadToSign: typeof createMsgCreateDidDocPayloadToSign;
export declare function createMsgDeactivateDidDocPayloadToSign(didPayload: DIDDocument, versionId?: string): Uint8Array<ArrayBufferLike>;
export declare function createMsgResourcePayloadToSign(payload: Partial<MsgCreateResourcePayload> | MsgCreateResourcePayload): Uint8Array<ArrayBufferLike>;
export declare function getCosmosAccount(publicKeyHex: string): string;
export declare function checkBalance(address: string, rpcAddress: string): Promise<readonly Coin[]>;
export declare function isJSON(input: any): boolean;
export declare const DefaultBackoffOptions: BackoffOptions;
export declare function retry<T>(fn: () => Promise<T>, options?: BackoffOptions): Promise<T | undefined>;
//# sourceMappingURL=utils.d.ts.map