import { DeliverTxResponse, QueryClient } from '@cosmjs/stargate';
import { AbstractCheqdSDKModule, MinimalImportableCheqdSDKModule } from './_.js';
import { CheqdSigningStargateClient } from '../signer.js';
import { DIDDocument, DidStdFee, IContext, ISignInputs, QueryExtensionSetup, SpecValidationResult, DIDDocumentWithMetadata, AuthenticationValidationResult } from '../types.js';
import { MsgCreateDidDoc, MsgCreateDidDocResponse, MsgDeactivateDidDoc, MsgDeactivateDidDocResponse, MsgUpdateDidDoc, MsgUpdateDidDocResponse, SignInfo, QueryAllDidDocVersionsMetadataResponse, DidDocWithMetadata, DidDoc, Metadata } from '@cheqd/ts-proto/cheqd/did/v2/index.js';
import { EncodeObject, GeneratedType } from '@cosmjs/proto-signing';
import { CheqdQuerier } from '../querier.js';
import { DIDDocumentMetadata } from 'did-resolver';
export declare const defaultDidExtensionKey: "did";
export declare const contexts: {
    readonly W3CDIDv1: "https://www.w3.org/ns/did/v1";
    readonly W3CSuiteEd255192020: "https://w3id.org/security/suites/ed25519-2020/v1";
    readonly W3CSuiteEd255192018: "https://w3id.org/security/suites/ed25519-2018/v1";
    readonly W3CSuiteJws2020: "https://w3id.org/security/suites/jws-2020/v1";
    readonly LinkedDomainsContext: "https://identity.foundation/.well-known/did-configuration/v1";
};
export declare const protobufLiterals: {
    readonly MsgCreateDidDoc: "MsgCreateDidDoc";
    readonly MsgCreateDidDocResponse: "MsgCreateDidDocResponse";
    readonly MsgUpdateDidDoc: "MsgUpdateDidDoc";
    readonly MsgUpdateDidDocResponse: "MsgUpdateDidDocResponse";
    readonly MsgDeactivateDidDoc: "MsgDeactivateDidDoc";
    readonly MsgDeactivateDidDocResponse: "MsgDeactivateDidDocResponse";
};
export declare const typeUrlMsgCreateDidDoc: "/cheqd.did.v2.MsgCreateDidDoc";
export declare const typeUrlMsgCreateDidDocResponse: "/cheqd.did.v2.MsgCreateDidDocResponse";
export declare const typeUrlMsgUpdateDidDoc: "/cheqd.did.v2.MsgUpdateDidDoc";
export declare const typeUrlMsgUpdateDidDocResponse: "/cheqd.did.v2.MsgUpdateDidDocResponse";
export declare const typeUrlMsgDeactivateDidDoc: "/cheqd.did.v2.MsgDeactivateDidDoc";
export declare const typeUrlMsgDeactivateDidDocResponse: "/cheqd.did.v2.MsgDeactivateDidDocResponse";
export interface MsgCreateDidDocEncodeObject extends EncodeObject {
    readonly typeUrl: typeof typeUrlMsgCreateDidDoc;
    readonly value: Partial<MsgCreateDidDoc>;
}
export declare function isMsgCreateDidDocEncodeObject(obj: EncodeObject): obj is MsgCreateDidDocEncodeObject;
export declare function isMsgUpdateDidDocEncodeObject(obj: EncodeObject): obj is MsgUpdateDidDocEncodeObject;
export declare function isMsgDeactivateDidDocEncodeObject(obj: EncodeObject): obj is MsgDeactivateDidDocEncodeObject;
export interface MsgCreateDidDocResponseEncodeObject extends EncodeObject {
    readonly typeUrl: typeof typeUrlMsgCreateDidDocResponse;
    readonly value: Partial<MsgCreateDidDocResponse>;
}
export declare function MsgCreateDidDocResponseEncodeObject(obj: EncodeObject): obj is MsgCreateDidDocResponseEncodeObject;
export interface MsgUpdateDidDocEncodeObject extends EncodeObject {
    readonly typeUrl: typeof typeUrlMsgUpdateDidDoc;
    readonly value: Partial<MsgUpdateDidDoc>;
}
export declare function MsgUpdateDidDocEncodeObject(obj: EncodeObject): obj is MsgUpdateDidDocEncodeObject;
export interface MsgUpdateDidDocResponseEncodeObject extends EncodeObject {
    readonly typeUrl: typeof typeUrlMsgUpdateDidDocResponse;
    readonly value: Partial<MsgUpdateDidDocResponse>;
}
export declare function MsgUpdateDidDocResponseEncodeObject(obj: EncodeObject): obj is MsgUpdateDidDocResponseEncodeObject;
export interface MsgDeactivateDidDocEncodeObject extends EncodeObject {
    readonly typeUrl: typeof typeUrlMsgDeactivateDidDoc;
    readonly value: Partial<MsgDeactivateDidDoc>;
}
export declare function MsgDeactivateDidDocEncodeObject(obj: EncodeObject): obj is MsgUpdateDidDocEncodeObject;
export interface MsgDeactivateDidDocResponseEncodeObject extends EncodeObject {
    readonly typeUrl: typeof typeUrlMsgDeactivateDidDocResponse;
    readonly value: Partial<MsgDeactivateDidDocResponse>;
}
export declare function MsgDeactiveDidDocResponseEncodeObject(obj: EncodeObject): obj is MsgDeactivateDidDocResponseEncodeObject;
export type MinimalImportableDIDModule = MinimalImportableCheqdSDKModule<DIDModule>;
export type DidExtension = {
    readonly [defaultDidExtensionKey]: {
        readonly didDoc: (id: string) => Promise<DidDocWithMetadata>;
        readonly didDocVersion: (id: string, versionId: string) => Promise<DidDocWithMetadata>;
        readonly allDidDocVersionsMetadata: (id: string, paginationKey?: Uint8Array) => Promise<QueryAllDidDocVersionsMetadataResponse>;
    };
};
export declare const setupDidExtension: (base: QueryClient) => DidExtension;
export declare class DIDModule extends AbstractCheqdSDKModule {
    static readonly registryTypes: Iterable<[string, GeneratedType]>;
    static readonly baseMinimalDenom: "ncheq";
    static readonly fees: {
        readonly DefaultCreateDidDocFee: {
            readonly amount: "50000000000";
            readonly denom: "ncheq";
        };
        readonly DefaultUpdateDidDocFee: {
            readonly amount: "25000000000";
            readonly denom: "ncheq";
        };
        readonly DefaultDeactivateDidDocFee: {
            readonly amount: "10000000000";
            readonly denom: "ncheq";
        };
    };
    static readonly querierExtensionSetup: QueryExtensionSetup<DidExtension>;
    querier: CheqdQuerier & DidExtension;
    constructor(signer: CheqdSigningStargateClient, querier: CheqdQuerier & DidExtension);
    getRegistryTypes(): Iterable<[string, GeneratedType]>;
    getQuerierExtensionSetup(): QueryExtensionSetup<DidExtension>;
    createDidDocTx(signInputs: ISignInputs[] | SignInfo[], didPayload: DIDDocument, address: string, fee?: DidStdFee | 'auto' | number, memo?: string, versionId?: string, context?: IContext): Promise<DeliverTxResponse>;
    updateDidDocTx(signInputs: ISignInputs[] | SignInfo[], didPayload: DIDDocument, address: string, fee?: DidStdFee | 'auto' | number, memo?: string, versionId?: string, context?: IContext): Promise<DeliverTxResponse>;
    deactivateDidDocTx(signInputs: ISignInputs[] | SignInfo[], didPayload: DIDDocument, address: string, fee?: DidStdFee | 'auto' | number, memo?: string, versionId?: string, context?: IContext): Promise<DeliverTxResponse>;
    queryDidDoc(id: string, context?: IContext): Promise<DIDDocumentWithMetadata>;
    queryDidDocVersion(id: string, versionId: string, context?: IContext): Promise<DIDDocumentWithMetadata>;
    queryAllDidDocVersionsMetadata(id: string, context?: IContext): Promise<{
        didDocumentVersionsMetadata: DIDDocumentMetadata[];
        pagination: QueryAllDidDocVersionsMetadataResponse['pagination'];
    }>;
    static validateSpecCompliantPayload(didDocument: DIDDocument): Promise<SpecValidationResult>;
    static toSpecCompliantPayload(protobufDidDocument: DidDoc): Promise<DIDDocument>;
    static toSpecCompliantMetadata(protobufDidDocument: Metadata): Promise<DIDDocumentMetadata>;
    static validateAuthenticationAgainstSignatures(didDocument: DIDDocument, signatures: readonly SignInfo[], querier?: CheqdQuerier & DidExtension, externalControllersDidDocuments?: DIDDocument[]): Promise<AuthenticationValidationResult>;
    static validateAuthenticationAgainstSignaturesKeyRotation(didDocument: DIDDocument, signatures: readonly SignInfo[], querier: CheqdQuerier & DidExtension, previousDidDocument?: DIDDocument, externalControllersDidDocuments?: DIDDocument[]): Promise<AuthenticationValidationResult>;
    static generateCreateDidDocFees(feePayer: string, granter?: string): Promise<DidStdFee>;
    static generateUpdateDidDocFees(feePayer: string, granter?: string): Promise<DidStdFee>;
    static generateDeactivateDidDocFees(feePayer: string, granter?: string): Promise<DidStdFee>;
}
//# sourceMappingURL=did.d.ts.map